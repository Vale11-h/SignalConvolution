# -*- coding: utf-8 -*-
"""Convolución y Correlación.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x525EvNt2Ir7Nrw_vfsLrpQLUKCQcrUr
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import convolve

#CONVOLUCIÓN
print("Estudiante: Deisy Alejandra Ramírez Luis \n")
codigo = [5, 6, 0, 0, 6, 9, 6]
cedula = [1, 0, 5, 1, 0, 6, 4, 1, 5, 4]
y = convolve(codigo, cedula)
print("Y[n]: ", ', ' .join(map(str, y)))

# Valores de y[n]
y = [5, 6, 25, 35, 12, 39, 92, 80, 70, 92, 102, 78, 63, 75, 66, 24]
n = np.arange(len(y))
plt.figure(figsize=(10,4))
plt.stem(n, y)
plt.xlabel('n')
plt.ylabel('y[n]')
plt.title('Convolución Discreta y[n]')
plt.grid()
plt.show()

print("Estudiante: Paula Valentina Gómez Jiménez \n")
codigo = [5, 6, 0, 0, 6, 2, 8]
cedula = [1, 0, 7, 6, 7, 3, 7, 2, 3, 7]
y = convolve(codigo, cedula)
print("Y[n]:", ', '.join(map(str, y)))

# Valores de y[n]
y = [5,6,35,72,77,59,103,102,137,133,146,50,78,64,38,56]
n = np.arange(len(y))
plt.figure(figsize=(10,4))
plt.stem(n, y)
plt.xlabel('n')
plt.ylabel('y[n]')
plt.title('Convolución Discreta y[n]')
plt.grid()
plt.show()

print("Estudiante: Laura Valentina Huertas Alfonso \n")
codigo = [5, 6, 0, 0, 6, 2, 1]
cedula = [1, 0, 7, 6, 2, 4, 0, 3, 7, 1]
y = convolve(codigo, cedula)
print("Y[n]:", ', '.join(map(str, y)))

# Valores de y[n]
y = [5,6,35,72,52,34,67,65,84,81,16,22,48,23,9,1]
n = np.arange(len(y))
plt.figure(figsize=(10,4))
plt.stem(n, y)
plt.xlabel('n')
plt.ylabel('y[n]')
plt.title('Convolución Discreta y[n]')
plt.grid()
plt.show()

#CORRELACIÓN
# Definir parámetros
Ts = 1.25e-3  # 1.25 ms en segundos
f = 100  # Frecuencia en Hz
n = np.arange(9)  # Valores de n de 0 a 8
x1 = np.cos(2 * np.pi * f * n * Ts)
x2 = np.sin(2 * np.pi * f * n * Ts)

# Función para calcular la correlación cruzada manualmente
def correlacion_manual(x1, x2):
    N = len(x1)
    R = []
    for m in range(-N + 1, N):
        suma = 0
        for i in range(N):
            if 0 <= i + m < N:
                suma += x1[i] * x2[i + m]
        R.append(suma)
    return np.array(R)

# Calcular correlación cruzada
correlacion_manual_resultado = correlacion_manual(x1, x2)
lags = np.arange(-len(n) + 1, len(n))

# Graficar la correlación cruzada
plt.figure(figsize=(6, 4))
plt.stem(lags, correlacion_manual_resultado)
plt.xlabel('Desplazamiento (m)')
plt.ylabel('Correlación')
plt.title('Correlación Cruzada')
plt.grid()
plt.show()

# Imprimir los valores de la correlación de forma secuencial
print("Representación secuencial:")
print(', '.join(f'{x:.2f}' for x in correlacion_manual_resultado))